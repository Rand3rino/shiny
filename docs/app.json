[{"name":"app.R","content":"library(shiny)\r\nui <- fluidPage(\r\n  includeCSS('styles.css'),\r\n  withMathJax(),\r\n  wellPanel(\r\n    h3(strong('Confidence interval for the population proportion (\\\\(p\\\\))')),\r\n    h4('Formula: \\\\(\\\\hat{p} \\\\pm z^\\\\ast\\\\sqrt{\\\\frac{\\\\hat{p}(1-\\\\hat{p})}{n}}\\\\)'),\r\n    checkboxInput('description', label='Click to show more info!'),\r\n    conditionalPanel(\"input.description == true\", \r\n                     'The boxes below correspond to the panels directly below them.',\r\n      fluidRow(\r\n        column(4, wellPanel(\r\n          tags$div('Use the sliders to change the different variables in the formula:\r\n                   \\\\(\\\\hat{p}, n\\\\), and the confidence level (which affects \\\\(z^\\\\ast\\\\).\r\n                   (Helpful hint: Use the keyboard arrows after clicking on a slider for \r\n                   finer control.)',\r\n            style='font-size: x-small;')\r\n          ), \r\n          wellPanel(\r\n            tags$div('Using this formula to calculate the confidence interval depends on \r\n                     the assumption that the sampling distribution of the sample proportion \r\n                     is normally distributed.  The conditions for making this assumption are \r\n                     that the number of observed \\\"successes\\\" \\\\(n\\\\hat{p}\\\\) and the number \r\n                     of observed \\\"failures\\\" \\\\(n(1-\\\\hat{p})\\\\) are both greater than or \r\n                     equal to 10.  The app checks these conditions using the current values \r\n                     of \\\\(n\\\\) and \\\\(\\\\hat{p}\\\\) on the sliders and will not display the \r\n                     results of the formula is they are not met.', \r\n                     style='font-size: x-small;')\r\n          )\r\n        ),\r\n        column(4, wellPanel(\r\n          tags$div('This panel shows the different quantities that go into the confidence interval \r\n                   calculation:',\r\n                   tags$ul(\r\n                     tags$li('The confidence level multiplier \\\\(z^\\\\ast\\\\). This is determined \r\n                             from the confidence level C so there is C% of the area under \r\n                             the standard normal distribution between \\\\(-z^\\\\ast\\\\) and \r\n                             \\\\(+z^\\\\ast\\\\), as shown in the plot.'),\r\n                     tags$li('The standard error \\\\(se = \\\\sqrt{\\\\frac{\\\\hat{p}(1-\\\\hat{p})}{n}}\\\\).\r\n                             '),\r\n                     tags$li('The margin of error \\\\(me = z^\\\\ast (se) \\\\).')\r\n                   ),\r\n                   'Note that the confidence interval formula simplifies to \\\\(\\\\hat{p} \\\\pm me\\\\)\r\n                   so',\r\n                   tags$ul(\r\n                     tags$li('The center of the CI is determined by \\\\(\\\\hat{p}\\\\)'),\r\n                     tags$li('The width of the CI is determined by the margin of error.  \r\n                             (Specifically, the width = upper endpoint - lower endpoint = \r\n                             twice the margin of error.)')\r\n                   ),\r\n                   style='font-size:x-small;')\r\n        )),\r\n        column(4, wellPanel(\r\n          tags$div('This panel reports the lower and upper endpoints of the interval and provides \r\n                   a picture of the interval as well. (The dot shows the center of the interval.)\r\n                   You can change the range shown in this picture using the slider underneath.  \r\n                   However, if the confidence interval is ever outside the range that you provide,\r\n                   the range will revert to 0 to 1.',\r\n                   style='font-size:x-small;')\r\n        ))\r\n      , style=\"margin: 0px -20px;\")               \r\n    )\r\n  , style='padding-bottom: -0px;'),\r\n  fluidRow(\r\n  column(4, \r\n   wellPanel(\r\n    sliderInput('phat', label='Sample proportion \\\\(\\\\hat{p}\\\\)', \r\n                min=.01, max=.99, value=.5, step=.001),\r\n    sliderInput('n', label='Sample size \\\\(n\\\\)', min=2, max=1000, value=100, step=1),\r\n    sliderInput('C', label='Confidence level (%)', \r\n                min=80, max=99.8, value=95, step=.1, post='%')\r\n   ), \r\n   wellPanel(\r\n    h4(strong('Normal conditions')),\r\n    tags$ul(\r\n      tags$li('\\\"Successes\\\" \\\\(n\\\\hat{p}\\\\) = ', uiOutput('n_succ', inline=T)),\r\n      tags$li('\\\"Failures\\\" \\\\(n(1-\\\\hat{p})\\\\) = ', uiOutput('n_fail', inline=T)),\r\n      tags$li('Both?', uiOutput('norm_cond', inline=T))\r\n    )\r\n  )),\r\n  conditionalPanel(\"output.norm_tf == true\",\r\n  column(4, \r\n   wellPanel(\r\n    h4(strong('Parts of the result: z*, se, me')),\r\n    '\\\\(z^\\\\ast = \\\\)', textOutput('zstar', inline=T),   \r\n    plotOutput('zstar_plot', height='140px'),\r\n    hr(),\r\n    'Standard Error = \\\\(\\\\sqrt{\\\\frac{\\\\hat{p}(1-\\\\hat{p})}{n}}\\\\) = ',\r\n    textOutput('se', inline=T),\r\n    hr(),\r\n    'Margin of Error = \\\\(z^\\\\ast (se)\\\\)  = ', textOutput('me', inline=T)\r\n  )),\r\n  column(4, wellPanel(\r\n    h4('Confidence interval = ', textOutput('ci', inline=T)),\r\n    plotOutput('plot', height=\"110px\"),\r\n    sliderInput('range', label='Range Shown', min=0, max=1, value=c(0,1), step=.01)\r\n    \r\n  ))\r\n  ),\r\n  conditionalPanel(\"output.norm_tf == false\",\r\n    column(8, wellPanel(\r\n      h3(strong('Normal conditions not met!')),\r\n      'It\\'s not appropriate to use this formula to calculate the confidence interval.'\r\n    ))                 \r\n  )\r\n))\r\n\r\nserver <- function(input, output, session) {\r\n  res <- reactive({\r\n    succ <- input$n * input$phat\r\n    fail <- input$n * (1 - input$phat)\r\n    zstar <- qnorm((1-input$C/100)/2, lower.tail=F)\r\n    se <- sqrt(input$phat*(1-input$phat)/input$n)\r\n    me <- zstar * se\r\n    ci <- input$phat + c(-1, 1) * me\r\n    list(succ=succ, fail=fail, zstar=zstar, se=se, me=me, ci=ci)\r\n  })\r\n  # displays successes or failures and makes green check marks or x's\r\n    output$n_succ <- renderUI({\r\n      HTML(paste(round(res()$succ, 2), \r\n               ifelse(res()$succ >= 10,\r\n                      '&ge; 10 <span style=\"color:green\">&#10004;<\/span>', \r\n                      '< 10 <span style=\"color:red\">&#10008;<\/span>')))\r\n    })\r\n    output$n_fail <- renderUI({\r\n      HTML(paste(round(res()$fail, 2), \r\n               ifelse(res()$fail >= 10,\r\n                      '&ge; 10 <span style=\"color:green\">&#10004;<\/span>', \r\n                      '<10 <span style=\"color:red\">&#10008;<\/span>')))\r\n    })\r\n    output$norm_cond <- renderUI({\r\n      HTML(ifelse(res()$succ >=10 & res()$fail >= 10,\r\n                '<span style=\"color:green\">&#10004;<\/span>', \r\n                '<span style=\"color:red\">&#10008;<\/span>'))\r\n    })\r\n  #outputs T/F variable for whether normal conditions are met for use in the conditionalPanel\r\n    output$norm_tf <- reactive({\r\n      res()$succ >=10 & res()$fail >= 10\r\n    })\r\n    outputOptions(output, \"norm_tf\", suspendWhenHidden = FALSE)\r\n  # Parts of the result\r\n    output$zstar <- renderText({\r\n      round(res()$zstar, 3)\r\n    })\r\n    output$zstar_plot <- renderPlot({\r\n      par(mar=c(2,.1,.1,.1))\r\n      z <- seq(from=-3.1, to=3.1, by=.01)\r\n      plot(z, dnorm(z), type='l', xaxt='n', yaxt='n', lwd=2)\r\n      zstar3 <- round(res()$zstar, 3)\r\n      zstar2 <- floor(100*zstar3)/100\r\n      segments(x0=zstar3*c(-1,1), y0=0, y1=dnorm(zstar3))\r\n      polygon(x=c(-zstar3, -zstar3, seq(from=-zstar2, to=zstar2, by=.01), zstar3, zstar3), \r\n              y=c(0, dnorm(-zstar3), dnorm(seq(from=-zstar2, to=zstar2, by=.01)), dnorm(zstar3), 0), \r\n              col='skyblue')\r\n      axis(side=1, at=c(-zstar3, 0, zstar3), labels=c(-zstar3, '0', zstar3))\r\n      text(0, .5*dnorm(0), paste0(input$C,'%'))\r\n    })\r\n    output$se <- renderText({\r\n      round(res()$se, 4)\r\n    })\r\n    output$me <- renderText({\r\n      round(res()$me, 4)\r\n    })\r\n  #Text and plot of CI  \r\n    output$ci <- renderText({\r\n      paste0(\"(\", round(res()$ci[1],3), \", \", round(res()$ci[2],3), \")\")\r\n    })\r\n  output$plot <- renderPlot({\r\n    par(mar=c(2.1, .1, .1, .1))\r\n      plot(res()$ci, c(0,0), xlim=input$range, ylim=c(-.05, .05), \r\n           pch=c('[', ']'), cex=3, yaxt='n', xlab='Values of the population proportion', ylab='')\r\n      segments(x0=res()$ci[1],x1=res()$ci[2],y0=0, col=4, lwd=3)\r\n      points(x=input$phat, y=0, col=4, cex=2, pch=19)\r\n      grid(NULL, NA)\r\n  })\r\n  observe({\r\n    if(res()$ci[1] < input$range[1] | res()$ci[2] > input$range[2])\r\n      updateSliderInput(session, 'range', value=c(0,1))\r\n  })\r\n}\r\n\r\nshinyApp(ui = ui, server = server)\r\n\r\n","type":"text"},{"name":"styles.css","content":"hr{\r\n    border-style: solid;\r\n    border-color: black;\r\n}\r\nul{\r\n    padding-left: 20px;\r\n}\r\nh3, h4{\r\n\tmargin-top: 0px;\r\n\tmargin-bottom: 5px;\r\n}\r\n.well{\r\n\tmargin: 5px 5px 5px 5px;\r\n\tpadding: 15px;\r\n}\r\n.row{\r\n\tpadding: 0px;\r\n\tmargin: 0px;\r\n}\r\n.col-sm-3, .col-sm-4, .col-sm-5, .col-sm-6, .col-sm-7, .col-sm-8, .col-sm-9{\r\n\tpadding: 0px;\r\n\tmargin: 0px;\r\n}\r\n.container-fluid{\r\n\tpadding: 0px 0px 0px 0px; /* top right bottom left */\r\n\tmargin:0px;\r\n}\r\n.navbar-header{\r\n\tmargin: 0px;\r\n}\r\n.tab-pane{\r\n\tpadding: 0px;\r\n\tmargin: 0px;\r\n}\r\n.tab-content{\r\n\tpadding: 0px;\r\n\tmargin: 0px;\r\n}\r\ndiv.checkbox{\r\n\tmargin: 0px;\r\n}\r\nnav.navbar{\r\n\tpadding-left: 15px;\r\n\tmargin-bottom: 0px;\r\n}","type":"text"}]
